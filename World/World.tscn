[gd_scene load_steps=21 format=2]

[ext_resource path="res://World/Tower/Tower.tscn" type="PackedScene" id=1]
[ext_resource path="res://World/MouseHover.gd" type="Script" id=2]
[ext_resource path="res://World/Camera.tscn" type="PackedScene" id=3]
[ext_resource path="res://World/World.gd" type="Script" id=4]
[ext_resource path="res://World/dirt-tiles.png" type="Texture" id=5]
[ext_resource path="res://World/Scenery/cloud-particles.png" type="Texture" id=6]
[ext_resource path="res://World/Scenery/birds.png" type="Texture" id=7]
[ext_resource path="res://World/Scenery/star-particles.png" type="Texture" id=8]
[ext_resource path="res://World/Scenery/background.png" type="Texture" id=9]

[sub_resource type="CanvasItemMaterial" id=1]
particles_animation = true
particles_anim_h_frames = 8
particles_anim_v_frames = 1
particles_anim_loop = false

[sub_resource type="Shader" id=2]
code = "shader_type particles;
uniform vec3 direction;
uniform float spread;
uniform float flatness;
uniform float initial_linear_velocity;
uniform float initial_angle;
uniform float angular_velocity;
uniform float orbit_velocity;
uniform float linear_accel;
uniform float radial_accel;
uniform float tangent_accel;
uniform float damping;
uniform float scale;
uniform float hue_variation;
uniform float anim_speed;
uniform float anim_offset;
uniform float initial_linear_velocity_random;
uniform float initial_angle_random;
uniform float angular_velocity_random;
uniform float orbit_velocity_random;
uniform float linear_accel_random;
uniform float radial_accel_random;
uniform float tangent_accel_random;
uniform float damping_random;
uniform float scale_random;
uniform float hue_variation_random;
uniform float anim_speed_random;
uniform float anim_offset_random;
uniform float lifetime_randomness;
uniform vec3 emission_box_extents;
uniform vec4 color_value : hint_color;
uniform int trail_divisor;
uniform vec3 gravity;


float rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float rand_from_seed_m1_p1(inout uint seed) {
	return rand_from_seed(seed) * 2.0 - 1.0;
}

uint hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

void vertex() {
	uint base_number = NUMBER / uint(trail_divisor);
	uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	float angle_rand = rand_from_seed(alt_seed);
	float scale_rand = rand_from_seed(alt_seed);
	float hue_rot_rand = rand_from_seed(alt_seed);
	float anim_offset_rand = rand_from_seed(alt_seed);
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;

	bool restart = false;
	if (CUSTOM.y > CUSTOM.w) {
		restart = true;
	}

	if (RESTART || restart) {
		float tex_linear_velocity = 0.0;
		float tex_angle = 0.0;
		float tex_anim_offset = 0.0;
		float spread_rad = spread * degree_to_rad;
		float angle1_rad = rand_from_seed_m1_p1(alt_seed) * spread_rad;
		angle1_rad += direction.x != 0.0 ? atan(direction.y, direction.x) : sign(direction.y) * (pi / 2.0);
		vec3 rot = vec3(cos(angle1_rad), sin(angle1_rad), 0.0);
		VELOCITY = rot * initial_linear_velocity * mix(1.0, rand_from_seed(alt_seed), initial_linear_velocity_random);
		float base_angle = (initial_angle + tex_angle) * mix(1.0, angle_rand, initial_angle_random);
		CUSTOM.x = base_angle * degree_to_rad;
		CUSTOM.y = 0.0;
		CUSTOM.w = (1.0 - lifetime_randomness * rand_from_seed(alt_seed));
		CUSTOM.z = (anim_offset + tex_anim_offset) * mix(1.0, anim_offset_rand, anim_offset_random);
		TRANSFORM[3].xyz = vec3(rand_from_seed(alt_seed) * 2.0 - 1.0, rand_from_seed(alt_seed) * 2.0 - 1.0, rand_from_seed(alt_seed) * 2.0 - 1.0) * emission_box_extents;
		VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
		TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
		VELOCITY.z = 0.0;
		TRANSFORM[3].z = 0.0;
	} else {
		CUSTOM.y += DELTA / LIFETIME;
		float tex_linear_velocity = 0.0;
		float tex_orbit_velocity = 0.0;
		float tex_angular_velocity = 0.0;
		float tex_linear_accel = 0.0;
		float tex_radial_accel = 0.0;
		float tex_tangent_accel = 0.0;
		float tex_damping = 0.0;
		float tex_angle = 0.0;
		float tex_anim_speed = 0.0;
		float tex_anim_offset = 0.0;
		vec3 force = gravity;
		vec3 pos = TRANSFORM[3].xyz;
		pos.z = 0.0;
		// apply linear acceleration
		force += length(VELOCITY) > 0.0 ? normalize(VELOCITY) * (linear_accel + tex_linear_accel) * mix(1.0, rand_from_seed(alt_seed), linear_accel_random) : vec3(0.0);
		// apply radial acceleration
		vec3 org = EMISSION_TRANSFORM[3].xyz;
		vec3 diff = pos - org;
		force += length(diff) > 0.0 ? normalize(diff) * (radial_accel + tex_radial_accel) * mix(1.0, rand_from_seed(alt_seed), radial_accel_random) : vec3(0.0);
		// apply tangential acceleration;
		force += length(diff.yx) > 0.0 ? vec3(normalize(diff.yx * vec2(-1.0, 1.0)), 0.0) * ((tangent_accel + tex_tangent_accel) * mix(1.0, rand_from_seed(alt_seed), tangent_accel_random)) : vec3(0.0);
		// apply attractor forces
		VELOCITY += force * DELTA;
		// orbit velocity
		float orbit_amount = (orbit_velocity + tex_orbit_velocity) * mix(1.0, rand_from_seed(alt_seed), orbit_velocity_random);
		if (orbit_amount != 0.0) {
		     float ang = orbit_amount * DELTA * pi * 2.0;
		     mat2 rot = mat2(vec2(cos(ang), -sin(ang)), vec2(sin(ang), cos(ang)));
		     TRANSFORM[3].xy -= diff.xy;
		     TRANSFORM[3].xy += rot * diff.xy;
		}
		if (damping + tex_damping > 0.0) {
			float v = length(VELOCITY);
			float damp = (damping + tex_damping) * mix(1.0, rand_from_seed(alt_seed), damping_random);
			v -= damp * DELTA;
			if (v < 0.0) {
				VELOCITY = vec3(0.0);
			} else {
				VELOCITY = normalize(VELOCITY) * v;
			}
		}
		float base_angle = (initial_angle + tex_angle) * mix(1.0, angle_rand, initial_angle_random);
		base_angle += CUSTOM.y * LIFETIME * (angular_velocity + tex_angular_velocity) * mix(1.0, rand_from_seed(alt_seed) * 2.0 - 1.0, angular_velocity_random);
		CUSTOM.x = base_angle * degree_to_rad;
		CUSTOM.z = (anim_offset + tex_anim_offset) * mix(1.0, anim_offset_rand, anim_offset_random) + CUSTOM.y * (anim_speed + tex_anim_speed) * mix(1.0, rand_from_seed(alt_seed), anim_speed_random);
	}
	float tex_scale = 1.0;
	float tex_hue_variation = 0.0;
	float hue_rot_angle = (hue_variation + tex_hue_variation) * pi * 2.0 * mix(1.0, hue_rot_rand * 2.0 - 1.0, hue_variation_random);
	float hue_rot_c = cos(hue_rot_angle);
	float hue_rot_s = sin(hue_rot_angle);
	mat4 hue_rot_mat = mat4(vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.000, 0.000, 0.000, 1.0)) +
		mat4(vec4(0.701, -0.587, -0.114, 0.0),
			vec4(-0.299, 0.413, -0.114, 0.0),
			vec4(-0.300, -0.588, 0.886, 0.0),
			vec4(0.000, 0.000, 0.000, 0.0)) * hue_rot_c +
		mat4(vec4(0.168, 0.330, -0.497, 0.0),
			vec4(-0.328, 0.035,  0.292, 0.0),
			vec4(1.250, -1.050, -0.203, 0.0),
			vec4(0.000, 0.000, 0.000, 0.0)) * hue_rot_s;
	COLOR = hue_rot_mat * color_value;

	TRANSFORM[0] = vec4(cos(CUSTOM.x), -sin(CUSTOM.x), 0.0, 0.0);
	TRANSFORM[1] = vec4(sin(CUSTOM.x), cos(CUSTOM.x), 0.0, 0.0);
	TRANSFORM[2] = vec4(0.0, 0.0, 1.0, 0.0);
	TRANSFORM[3].y += sin((TIME*0.1)+TRANSFORM[3].x*0.1) * 0.1;
	float base_scale = tex_scale * mix(scale, 1.0, scale_random * scale_rand);
	if (base_scale < 0.000001) {
		base_scale = 0.000001;
	}
	TRANSFORM[0].xyz *= base_scale;
	TRANSFORM[1].xyz *= base_scale;
	TRANSFORM[2].xyz *= base_scale;
	VELOCITY.z = 0.0;
	TRANSFORM[3].z = 0.0;
	if (CUSTOM.y > CUSTOM.w) {		ACTIVE = false;
	}
}

"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/direction = Vector3( 1, 0, 0 )
shader_param/spread = 0.0
shader_param/flatness = 0.0
shader_param/initial_linear_velocity = 30.0
shader_param/initial_angle = 0.0
shader_param/angular_velocity = 0.0
shader_param/orbit_velocity = 0.0
shader_param/linear_accel = 0.0
shader_param/radial_accel = 0.0
shader_param/tangent_accel = 0.0
shader_param/damping = 0.0
shader_param/scale = 1.0
shader_param/hue_variation = 0.0
shader_param/anim_speed = 0.0
shader_param/anim_offset = 1.0
shader_param/initial_linear_velocity_random = 0.5
shader_param/initial_angle_random = 0.0
shader_param/angular_velocity_random = 0.0
shader_param/orbit_velocity_random = 0.0
shader_param/linear_accel_random = 0.0
shader_param/radial_accel_random = 0.0
shader_param/tangent_accel_random = 0.0
shader_param/damping_random = 0.0
shader_param/scale_random = 0.0
shader_param/hue_variation_random = 0.0
shader_param/anim_speed_random = 0.0
shader_param/anim_offset_random = 1.0
shader_param/lifetime_randomness = 0.0
shader_param/emission_box_extents = Vector3( 1, 200, 1 )
shader_param/color_value = Color( 1, 1, 1, 1 )
shader_param/trail_divisor = 1
shader_param/gravity = Vector3( 0, -1e-06, 0 )

[sub_resource type="CanvasItemMaterial" id=4]
particles_animation = true
particles_anim_h_frames = 6
particles_anim_v_frames = 1
particles_anim_loop = true

[sub_resource type="ParticlesMaterial" id=5]
emission_shape = 2
emission_box_extents = Vector3( 1, 250, 1 )
flag_disable_z = true
spread = 0.0
gravity = Vector3( 0, 0, 0 )
initial_velocity = 20.0
initial_velocity_random = 0.2
orbit_velocity = 0.0
orbit_velocity_random = 0.0
anim_speed = 16.35
anim_speed_random = 0.2

[sub_resource type="CanvasItemMaterial" id=6]
particles_animation = true
particles_anim_h_frames = 10
particles_anim_v_frames = 1
particles_anim_loop = true

[sub_resource type="Gradient" id=7]
offsets = PoolRealArray( 0, 0.179894, 0.820106, 1 )
colors = PoolColorArray( 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 )

[sub_resource type="GradientTexture" id=8]
gradient = SubResource( 7 )

[sub_resource type="ParticlesMaterial" id=9]
emission_shape = 2
emission_box_extents = Vector3( 272, 200, 1 )
flag_disable_z = true
spread = 0.0
gravity = Vector3( 0, 0, 0 )
initial_velocity_random = 0.2
orbit_velocity = 0.0
orbit_velocity_random = 0.0
color_ramp = SubResource( 8 )
anim_offset = 1.0
anim_offset_random = 1.0

[sub_resource type="RectangleShape2D" id=10]
extents = Vector2( 600, 80 )

[sub_resource type="TileSet" id=11]
0/name = "dirt-tiles.png 0"
0/texture = ExtResource( 5 )
0/tex_offset = Vector2( 0, 0 )
0/modulate = Color( 1, 1, 1, 1 )
0/region = Rect2( 0, 0, 64, 32 )
0/tile_mode = 2
0/autotile/icon_coordinate = Vector2( 0, 0 )
0/autotile/tile_size = Vector2( 16, 16 )
0/autotile/spacing = 0
0/autotile/occluder_map = [  ]
0/autotile/navpoly_map = [  ]
0/autotile/priority_map = [  ]
0/autotile/z_index_map = [  ]
0/occluder_offset = Vector2( 0, 0 )
0/navigation_offset = Vector2( 0, 0 )
0/shape_offset = Vector2( 0, 0 )
0/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
0/shape_one_way = false
0/shape_one_way_margin = 0.0
0/shapes = [  ]
0/z_index = 0

[node name="World" type="Node2D"]
script = ExtResource( 4 )

[node name="Mountain" type="Sprite" parent="."]
position = Vector2( 0, 224 )
z_index = -1000
texture = ExtResource( 9 )
centered = false

[node name="Clouds" type="Particles2D" parent="."]
material = SubResource( 1 )
position = Vector2( -100, -200 )
z_index = -100
amount = 15
lifetime = 40.0
preprocess = 30.0
visibility_rect = Rect2( -100, -3000, 200, 6000 )
process_material = SubResource( 3 )
texture = ExtResource( 6 )

[node name="Birds" type="Particles2D" parent="."]
material = SubResource( 4 )
position = Vector2( -100, -20 )
z_index = -100
amount = 25
lifetime = 50.0
preprocess = 30.0
explosiveness = 0.3
visibility_rect = Rect2( -100, -3000, 200, 6000 )
process_material = SubResource( 5 )
texture = ExtResource( 7 )

[node name="Stars" type="Particles2D" parent="."]
material = SubResource( 6 )
position = Vector2( 0, -600 )
z_index = -100
amount = 25
lifetime = 30.0
preprocess = 30.0
visibility_rect = Rect2( -100, -3000, 200, 6000 )
process_material = SubResource( 9 )
texture = ExtResource( 8 )

[node name="Tower" parent="." groups=[
"tower",
] instance=ExtResource( 1 )]
position = Vector2( 112, 256 )

[node name="Floor" type="Node2D" parent="." groups=[
"floor",
]]
position = Vector2( 144, 312 )
__meta__ = {
"_edit_group_": true
}

[node name="Area2D" type="Area2D" parent="Floor"]
collision_layer = 16
collision_mask = 16

[node name="CollisionShape2D" type="CollisionShape2D" parent="Floor/Area2D"]
position = Vector2( 0, 80 )
shape = SubResource( 10 )

[node name="MouseHover" type="Position2D" parent="."]
script = ExtResource( 2 )

[node name="CameraPosition" parent="." instance=ExtResource( 3 )]

[node name="Dirt" type="TileMap" parent="."]
tile_set = SubResource( 11 )
cell_size = Vector2( 16, 16 )
format = 1
tile_data = PoolIntArray( 1245184, 0, 3, 1245185, 0, 0, 1245186, 0, 3, 1245187, 0, 3, 1245188, 0, 3, 1245189, 0, 3, 1245190, 0, 2, 1245191, 0, 0, 1245192, 0, 3, 1245193, 0, 0, 1245194, 0, 3, 1245195, 0, 2, 1245196, 0, 0, 1245197, 0, 2, 1245198, 0, 1, 1245199, 0, 3, 1245200, 0, 0, 1310720, 0, 65536, 1310721, 0, 65539, 1310722, 0, 65539, 1310723, 0, 65538, 1310724, 0, 65539, 1310725, 0, 65537, 1310726, 0, 65539, 1310727, 0, 65536, 1310728, 0, 65539, 1310729, 0, 65539, 1310730, 0, 65539, 1310731, 0, 65538, 1310732, 0, 65539, 1310733, 0, 65539, 1310734, 0, 65536, 1310735, 0, 65539, 1310736, 0, 65539, 1376256, 0, 65537, 1376257, 0, 65539, 1376258, 0, 65537, 1376259, 0, 65538, 1376260, 0, 65536, 1376261, 0, 65539, 1376262, 0, 65539, 1376263, 0, 65539, 1376264, 0, 65539, 1376265, 0, 65539, 1376266, 0, 65536, 1376267, 0, 65538, 1376268, 0, 65539, 1376269, 0, 65539, 1376270, 0, 65539, 1376271, 0, 65539, 1376272, 0, 65537, 1441792, 0, 65538, 1441793, 0, 65538, 1441794, 0, 65539, 1441795, 0, 65538, 1441796, 0, 65539, 1441797, 0, 65539, 1441798, 0, 65536, 1441799, 0, 65538, 1441800, 0, 65539, 1441801, 0, 65538, 1441802, 0, 65537, 1441803, 0, 65536, 1441804, 0, 65538, 1441805, 0, 65539, 1441806, 0, 65536, 1441807, 0, 65537, 1441808, 0, 65538 )
[connection signal="attempt_piece_place" from="MouseHover" to="." method="_on_MouseHover_attempt_piece_place"]
